{"version":3,"sources":["serviceWorker.js","Navigation/Navigation.js","Header/Header.js","About/About.js","Projects/Projects.js","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","navLinks","map","section","react_default","a","createElement","href","className","this","props","logoTitle","Component","Header","title","About","Projects","App","src_Navigation_Navigation","src_Header_Header","src_About_About","src_Projects_Projects","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECSSC,mLAnBP,IACMC,EADW,CAAC,OAAQ,QAAS,eACTC,IAAK,SAAAC,GAC3B,OACIC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAM,IAAMJ,GAAUA,MAGrC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAQC,KAAKC,MAAMC,WACjCP,EAAAC,EAAAC,cAAA,UACKL,WAZIW,aCkBVC,0LAlBP,OACIT,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,UAAKG,KAAKC,MAAMI,OAChBV,EAAAC,EAAAC,cAAA,2OARPM,cCWNG,0LATP,OACIX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACfJ,EAAAC,EAAAC,cAAA,gCAJQM,cCWLI,0LATP,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACfJ,EAAAC,EAAAC,cAAA,gCAJWM,cCMjBK,mLAEE,OACIb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAD,CAAYP,UAAU,kBACtBP,EAAAC,EAAAC,cAACa,EAAD,CAAQL,MAAM,aACdV,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,cAPMT,aAclBU,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SLyG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d8aa1cc8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport './Navigation.css';\r\n\r\n//import './App.css';\r\n\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        const sections = ['Home', 'About', 'My Projects'];\r\n        const navLinks = sections.map( section => {\r\n            return (\r\n                <li><a href={'#' + section}>{section}</a></li>\r\n            )\r\n        })\r\n        return (\r\n            <nav>\r\n                <h2 className=\"logo\">{this.props.logoTitle}</h2>\r\n                <ul>\r\n                    {navLinks}\r\n                </ul>\r\n      </nav>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Navigation;\r\n","import React, { Component } from \"react\";\r\nimport './Header.css'\r\n\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div className='headerImg'>\r\n                    <div className='paragraph'>\r\n                        <div className='transbox'>\r\n                            <h1>{this.props.title}</h1>\r\n                            <p>Hello, My name is Aysel and I am a Web Developer from London, UK.\r\n                            I am using HTML CSS and Javascript on a day-to-day basis.\r\n                            I like to build things that work and look good. I am constantly improving and learning.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        );\r\n\r\n    }\r\n};\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport './About.css'\r\n\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n            <h1> About Me </h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport './Projects.css'\r\n\r\n\r\nclass Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n            <h1> About Me </h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Projects;\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Navigation from './Navigation/Navigation.js';\nimport Header from './Header/Header.js';\nimport About from './About/About';\nimport Projects from './Projects/Projects';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n            <Navigation logoTitle=\"Aysel Rzayeva\"/>\n            <Header title=\"Welcome!\" />\n            <About />\n            <Projects/>\n            </div>\n        );\n    }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}